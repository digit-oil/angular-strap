{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","dropdown/dropdown.js","tooltip/tooltip.js","select/select.js","timepicker/timepicker.js","tab/tab.js","popover/popover.js","scrollspy/scrollspy.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","angular","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","isDefined","onSelect","$setViewValue","length","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","keyCode","$digest","show","$element","hide","$onKeyDown","$$phase","$root","TypeaheadFactory","array","$filter","expression","directive","results","postLink","attr","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","destroy","$on","target","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","promise","$bsTooltip","$promise","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","nodeName","on","isTouch","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$options","$bsCompiler","$new","toLowerCase","$id","id","map","parseFloat","$sce","trustAsHtml","$setEnabled","$hide","setEnabled","isEnabled","compileData","tipContainer","init","bindTriggerEvents","isElement","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","version","prepend","$applyPlacement","$animate","enterAnimateCallback","focus","_blur","leave","onBeforeHide","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","which","blur","query","querySelectorAll","isNative","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$isActive","$selectNone","$updateActiveIndex","splice","a","indexOf","b","$apply","isArray","$getIndex","anchor","anchorCandidate","targetEl","triggerHandler","isUndefined","$selectScrollFix","$isIE","stopImmediatePropagation","ua","_show","activeElement","tagName","e","_hide","dataMultiple","inputEl","addEventListener","join","$isEmpty","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","$setActive","name","fn","$pane","$tab","transclude","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","controllers","render","customClass","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","size","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","$show","bottom","destroyModalElement","z-index","defaultPrevented","minor","backdropAnimation","bindBackdropEvents","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$hasClear","$toggleMode","$views","$mode","setMode","$setToday","$clear","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","bsCollapseToggle","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","bind","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$bsTooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $bsTooltip = {};\n\n        // Common vars\n        var options = $bsTooltip.$options = angular.extend({}, defaults, config);\n        var promise = $bsTooltip.$promise = $bsCompiler.compile(options);\n        var scope = $bsTooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $bsTooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $bsTooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $bsTooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $bsTooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $bsTooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $bsTooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $bsTooltip.init();\n        });\n\n        $bsTooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $bsTooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $bsTooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $bsTooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $bsTooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $bsTooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $bsTooltip.show = function () {\n          if (!options.bsEnabled || $bsTooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $bsTooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($bsTooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $bsTooltip.$scope.$new();\n          tipElement = $bsTooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $bsTooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $bsTooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $bsTooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $bsTooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($bsTooltip);\n          }\n        }\n\n        $bsTooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $bsTooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $bsTooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $bsTooltip.hide = function (blur) {\n\n          if (!$bsTooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $bsTooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($bsTooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $bsTooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $bsTooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($bsTooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $bsTooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($bsTooltip.$isShown) {\n            $bsTooltip.leave();\n          } else {\n            $bsTooltip.enter();\n          }\n        };\n\n        $bsTooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $bsTooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $bsTooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $bsTooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $bsTooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($bsTooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $bsTooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $bsTooltip.$isShown) {\n            $bsTooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $bsTooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $bsTooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($bsTooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $bsTooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $bsTooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $bsTooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $bsTooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $bsTooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $bsTooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $bsTooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $bsTooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $bsTooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $bsTooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $bsTooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $bsTooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $bsTooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $bsTooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$bsTooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($bsTooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($bsTooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $bsTooltip.$element = null;\n          }\n        }\n\n        return $bsTooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $bsTooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $bsTooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$bsTooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $bsTooltip = {};\n\n        // Common vars\n        var options = $bsTooltip.$options = angular.extend({}, defaults, config);\n        var promise = $bsTooltip.$promise = $bsCompiler.compile(options);\n        var scope = $bsTooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $bsTooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $bsTooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $bsTooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $bsTooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $bsTooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $bsTooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $bsTooltip.init();\n        });\n\n        $bsTooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $bsTooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $bsTooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $bsTooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $bsTooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $bsTooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $bsTooltip.show = function () {\n          if (!options.bsEnabled || $bsTooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $bsTooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($bsTooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $bsTooltip.$scope.$new();\n          tipElement = $bsTooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $bsTooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $bsTooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $bsTooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $bsTooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($bsTooltip);\n          }\n        }\n\n        $bsTooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $bsTooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $bsTooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $bsTooltip.hide = function (blur) {\n\n          if (!$bsTooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $bsTooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($bsTooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $bsTooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $bsTooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($bsTooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $bsTooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($bsTooltip.$isShown) {\n            $bsTooltip.leave();\n          } else {\n            $bsTooltip.enter();\n          }\n        };\n\n        $bsTooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $bsTooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $bsTooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $bsTooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $bsTooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($bsTooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $bsTooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $bsTooltip.$isShown) {\n            $bsTooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $bsTooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $bsTooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($bsTooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $bsTooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $bsTooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $bsTooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $bsTooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $bsTooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $bsTooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $bsTooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $bsTooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $bsTooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $bsTooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $bsTooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $bsTooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $bsTooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $bsTooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$bsTooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($bsTooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($bsTooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $bsTooltip.$element = null;\n          }\n        }\n\n        return $bsTooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $bsTooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $bsTooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}